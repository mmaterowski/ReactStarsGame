{"version":3,"sources":["math-utils.js","StarDisplay.js","PlayNumber.js","PlayAgain.js","Game.js","StarMatch.js","serviceWorker.js","index.js"],"names":["utils","sum","arr","reduce","acc","curr","range","min","max","Array","from","length","_","i","random","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push","StarsDisplay","props","count","map","starId","key","className","colors","available","used","wrong","candidate","PlayNumber","style","backgroundColor","status","onClick","number","PlayAgain","color","gameStatus","Game","useState","stars","setStars","availableNums","setAvailableNums","candidateNums","setCandidateNums","secondsLeft","setSecondsLeft","useEffect","timerId","setTimeout","clearTimeout","setGameState","newCandidateNums","newAvailableNums","filter","n","includes","useGameState","candidatesAreWrong","numberStatus","onNumberClick","currentStatus","cn","startNewGame","StarMatch","React","gameId","setGameId","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.decbc282.chunk.js","sourcesContent":["const utils = {\r\n    sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\r\n\r\n    range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\r\n\r\n    random: (min, max) => min + Math.floor(max * Math.random()),\r\n\r\n    randomSumIn: (arr, max) => {\r\n        const sets = [[]];\r\n        const sums = [];\r\n        for (let i = 0; i < arr.length; i++) {\r\n            for (let j = 0, len = sets.length; j < len; j++) {\r\n                const candidateSet = sets[j].concat(arr[i]);\r\n                const candidateSum = utils.sum(candidateSet);\r\n                if (candidateSum <= max) {\r\n                    sets.push(candidateSet);\r\n                    sums.push(candidateSum);\r\n                }\r\n            }\r\n        }\r\n        return sums[utils.random(0, sums.length)];\r\n    },\r\n};\r\n\r\nexport default utils","import React from 'react'\r\nimport utils from './math-utils'\r\nconst StarsDisplay = props => (\r\n    <>\r\n        {utils.range(1, props.count).map(starId =>\r\n            <div key={starId} className=\"star\" />)}\r\n    </>\r\n)\r\n\r\nexport default StarsDisplay","import React from 'react'\r\n\r\nconst colors = {\r\n    available: 'lightgray',\r\n    used: 'lightgreen',\r\n    wrong: 'lightcoral',\r\n    candidate: 'deepskyblue',\r\n};\r\n\r\nconst PlayNumber = props => (\r\n    <button\r\n        className=\"number\"\r\n        style={{ backgroundColor: colors[props.status] }}\r\n        onClick={() => props.onClick(props.number, props.status)}\r\n    >\r\n        {props.number}\r\n    </button>\r\n)\r\n\r\nexport default PlayNumber","import React from 'react'\r\n\r\nconst PlayAgain = props => (\r\n    <div className=\"game-done\">\r\n        <div\r\n            className=\"message\"\r\n            style={{ color: props.gameStatus === 'lost' ? 'red' : 'green' }}\r\n        >\r\n            {props.gameStatus === 'lost' ? 'GameOver' : 'Nice'}\r\n        </div>\r\n        <button onClick={() => props.onClick()}>Play agin</button>\r\n    </div>\r\n);\r\n\r\n\r\nexport default PlayAgain","import React, { useState, useEffect } from 'react';\r\nimport StarsDisplay from './StarDisplay'\r\nimport PlayNumber from './PlayNumber'\r\nimport PlayAgain from './PlayAgain'\r\nimport utils from './math-utils'\r\n\r\nconst useGameState = () => {\r\n    const [stars, setStars] = useState(utils.random(1, 9));\r\n    const [availableNums, setAvailableNums] = useState(utils.range(1, 9));\r\n    const [candidateNums, setCandidateNums] = useState([]);\r\n    const [secondsLeft, setSecondsLeft] = useState(10);\r\n\r\n    useEffect(() => {\r\n        if (secondsLeft > 0 && availableNums.length > 0) {\r\n            const timerId = setTimeout(() => { setSecondsLeft(secondsLeft - 1) }, 1000);\r\n            return () => clearTimeout(timerId);\r\n        }\r\n    });\r\n    const setGameState = (newCandidateNums) => {\r\n\r\n        if (utils.sum(newCandidateNums) !== stars) {\r\n            setCandidateNums(newCandidateNums);\r\n        }\r\n        else {\r\n            const newAvailableNums = availableNums.filter(\r\n                n => !newCandidateNums.includes(n));\r\n            setStars(utils.randomSumIn(newAvailableNums, 9))\r\n            setAvailableNums(newAvailableNums);\r\n            setCandidateNums([]);\r\n        }\r\n    };\r\n\r\n    return { stars, availableNums, candidateNums, secondsLeft, setGameState };\r\n\r\n};\r\n\r\nconst Game = props => {\r\n    const {\r\n        stars,\r\n        availableNums,\r\n        candidateNums,\r\n        secondsLeft,\r\n        setGameState\r\n    } = useGameState();\r\n    const candidatesAreWrong = utils.sum(candidateNums) > stars;\r\n\r\n    const gameStatus = availableNums.length === 0\r\n        ? 'won'\r\n        : secondsLeft === 0 ? 'lost' : 'active';\r\n\r\n    const numberStatus = (number) => {\r\n        if (!availableNums.includes(number)) {\r\n            return 'used';\r\n        }\r\n        if (candidateNums.includes(number)) {\r\n            return candidatesAreWrong ? 'wrong' : 'candidate';\r\n        }\r\n        return 'available';\r\n    };\r\n\r\n    const onNumberClick = (number, currentStatus) => {\r\n        if (gameStatus !== 'active' || currentStatus == 'used') {\r\n            return;\r\n        }\r\n\r\n        const newCandidateNums =\r\n            currentStatus === 'available'\r\n                ? candidateNums.concat(number)\r\n                : candidateNums.filter(cn => cn !== number);\r\n        setGameState(newCandidateNums);\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            <div className=\"help\">\r\n                Pick 1 or more numbers that sum to the number of stars\r\n        </div>\r\n            <div className=\"body\">\r\n                <div className=\"left\">\r\n                    {gameStatus !== 'active'\r\n                        ? (<PlayAgain onClick={props.startNewGame} gameStatus={gameStatus} />)\r\n                        : (<StarsDisplay count={stars} />)}\r\n                </div>\r\n                <div className=\"right\">\r\n                    {utils.range(1, 9).map(number =>\r\n                        <PlayNumber\r\n                            key={number}\r\n                            number={number}\r\n                            status={numberStatus(number)}\r\n                            onClick={onNumberClick}\r\n                        />\r\n                    )}\r\n                </div>\r\n            </div>\r\n            <div className=\"timer\">Time Remaining: {secondsLeft}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Game","import React from 'react'\r\nimport Game from './Game'\r\n\r\nconst StarMatch = props => {\r\n    const [gameId, setGameId] = React.useState(1);\r\n    return <Game key={gameId} startNewGame={() => setGameId(gameId + 1)} />\r\n}\r\n\r\nexport default StarMatch","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport StarMatch from './StarMatch'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<StarMatch />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}